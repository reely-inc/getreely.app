---
import Layout from '../../layouts/Layout.astro'; // Adjust path if needed
import logo from '../../assets/logo-circle.png'; // Adjust path if needed
import getReely from '../../assets/get-reely-app.png'; // Adjust path if needed
import { Image } from 'astro:assets';
import EarlyAccessButton from '../../components/EarlyAccessButton.jsx'; // Adjust path if needed

// Required for dynamic routes in Astro
export async function getStaticPaths() {
  // Generic fallback for client-side routing or dynamic paths
  return [{ params: { vid: 'fallback' } }];
}

// --- Frontmatter (Best effort for initial render/SEO) ---
const { vid } = Astro.params;
let initialVideoId = ''; // Use a different name to avoid conflict with client-side var
// Try extracting from pathname FIRST (might work in SSR/some adapters)
if (Astro.url?.pathname) {
  const pathMatch = Astro.url.pathname.match(/\/share\/([^\/\.]+)/);
  if (pathMatch && pathMatch[1] && pathMatch[1] !== 'fallback') {
    initialVideoId = pathMatch[1];
  }
}
// Fallback to param if path didn't yield ID (e.g., during static build)
if (!initialVideoId && vid && vid !== 'fallback') {
  initialVideoId = vid;
}

// Generate initial thumbnail URL (might be undefined)
const initialThumbnailUrl = initialVideoId
  ? `https://customer-4iy5eulg43mcpjtz.cloudflarestream.com/${initialVideoId}/thumbnails/thumbnail.jpg`
  : undefined; // Default to undefined if no ID found server-side

console.log('Frontmatter initialVideoId:', initialVideoId);
console.log('Frontmatter initialThumbnailUrl:', initialThumbnailUrl);
---

<Layout
  title={initialVideoId ? `Watch this Reely video` : `Reely App - Async Video Chat`}
  description={initialVideoId ? `Check out this video on Reely...` : `Reely App is...`}
image={initialThumbnailUrl} > {/* Pass initial (potentially undefined) URL */}
  <div class="container">
    <div class="top-bar">
      <Image src={logo} alt="Reely Logo" width={126} height={126} loading="eager" />
    </div>

    <section class="video-container">
      <div id="video-player-container" class="video-wrapper" style="display: none;">
        {/* Iframe inserted by script */}
      </div>
      <div id="error-message" class="error-message" style="display: none;">
        <p>No video ID found in the URL path.</p>
        <p class="debug-info">Please check the URL format: /share/YOUR_VIDEO_ID</p>
      </div>
    </section>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const pathParts = window.location.pathname.split('/');
        // Get the last part, handle potential trailing slash
        let videoId = pathParts.pop() || pathParts.pop(); // Handles trailing slash

        // Basic validation/cleanup
        if (!videoId || videoId === 'share' || videoId === 'fallback') {
            videoId = ''; // Reset if invalid ID extracted
        } else {
            // Remove potential file extensions like .html if present
             videoId = videoId.split('.')[0];
        }

        console.log('Client-side extracted video ID:', videoId);

        const videoContainer = document.getElementById('video-player-container');
        const errorMessage = document.getElementById('error-message');

        if (videoId && videoContainer) {
          // --- VIDEO IFRAME SETUP ---
          const iframe = document.createElement('iframe');
          iframe.src = `https://customer-4iy5eulg43mcpjtz.cloudflarestream.com/${videoId}/iframe`;
          iframe.style.border = 'none';
          iframe.style.position = 'absolute';
          iframe.style.top = '0';
          iframe.style.left = '0';
          iframe.style.width = '100%';
          iframe.style.height = '100%';
          iframe.allow = "autoplay; encrypted-media; picture-in-picture;";
          iframe.allowFullscreen = true;
          iframe.title = 'Reely Video';

          videoContainer.innerHTML = '';
          videoContainer.appendChild(iframe);
          videoContainer.style.display = 'block';

          // --- META TAG UPDATE ---
          // Construct the correct thumbnail URL client-side
          const thumbnailUrl = `https://customer-4iy5eulg43mcpjtz.cloudflarestream.com/${videoId}/thumbnails/thumbnail.jpg`;
          console.log('Client-side setting og:image to:', thumbnailUrl);

          // Find the og:image meta tag (usually added by Layout.astro)
          let ogImageTag = document.querySelector('meta[property="og:image"]');
          if (!ogImageTag) {
             // If it doesn't exist, create it (less ideal, Layout should add it)
             ogImageTag = document.createElement('meta');
             ogImageTag.setAttribute('property', 'og:image');
             document.head.appendChild(ogImageTag);
             console.log('Client-side created og:image tag.');
          }
          // Update the content attribute
          ogImageTag.setAttribute('content', thumbnailUrl);

          // Also update twitter:image if present
           let twitterImageTag = document.querySelector('meta[name="twitter:image"]');
           if (twitterImageTag) {
               twitterImageTag.setAttribute('content', thumbnailUrl);
               console.log('Client-side updated twitter:image tag.');
           }
           // --- END META TAG UPDATE ---


          // Update history if needed (optional)
          // if (window.location.pathname !== `/share/${videoId}`) {
          //   window.history.replaceState({}, '', `/share/${videoId}`);
          // }

        } else {
          // Show error if no valid videoId found client-side
          if (errorMessage) {
            errorMessage.style.display = 'block';
          }
          if (!videoContainer) console.error('Video container element not found');
          console.error('Client-side: No valid video ID found in path:', window.location.pathname);
        }
      });
    </script>

    <section class="join-vibe">
      <h1>Got something to say?</h1>
      <p>
        This conversation is waiting for your voice! Download Reely now to reply with your own video and keep the Vibe going.
      </p>
      <div class="download-button">
        <EarlyAccessButton type="image" client:only="react" />
      </div>
    </section>
  </div>
</Layout>

<style>
  body {
    background-color: #060a13;
    color: #fff;
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    width: 100%;
    box-sizing: border-box;
  }

  .top-bar {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 10px 0;
    margin-bottom: 20px;
  }

  .video-container {
    width: 100%;
    display: flex;
    justify-content: center;
    margin-bottom: 40px;
  }

  .video-wrapper {
    /* 9:16 aspect ratio container */
    width: 405px;
    height: 720px;
    max-height: 80vh;
    max-width: 100%;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);
    border-radius: 12px;
  }

  .video-wrapper iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .error-message {
    background-color: rgba(255, 0, 0, 0.1);
    border: 1px solid rgba(255, 0, 0, 0.3);
    padding: 20px;
    border-radius: 8px;
    text-align: center;
  }
  
  .debug-info {
    font-size: 0.8rem;
    color: #999;
    margin-top: 10px;
  }

  .join-vibe {
    text-align: center;
    margin-top: 20px;
    padding: 20px;
    max-width: 600px;
  }

  h1 {
    color: #f9c07d;
    margin-bottom: 20px;
    font-size: 2rem;
  }

  p {
    line-height: 1.8;
    font-size: 1.1rem;
    margin: 10px 0 30px 0;
  }

  .download-button {
    margin-top: 20px;
  }

  @media (max-width: 768px) {
    .video-wrapper {
      width: 270px;
      height: 480px;
    }
  }

  @media (max-width: 480px) {
    .container {
      padding: 10px;
    }

    .video-wrapper {
      width: 225px;
      height: 400px;
    }

    h1 {
      font-size: 1.5rem;
    }

    p {
      font-size: 1rem;
    }
  }
</style>